openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["Answer the following questions as best you can, but speaking as compasionate medical professional. You have access to the following tools:\\n\\n                        Web Search: useful for when you need to answer questions about current events\\nSearch WebMD: useful for when you need to answer medical and pharmalogical questions\\n\\n                        Use the following format:\\n\\n                        Question: the input question you must answer\\n                        Thought: you should always think about what to do\\n                        Action: the action to take, should be one of [Web Search, Search WebMD]\\n                        Action Input: the input to the action\\n                        Observation: the result of the action\\n                        ... (this Thought/Action/Action Input/Observation can repeat N times)\\n                        Thought: I now know the final answer\\n                        Final Answer: the final answer to the original input question\\n\\n                        Begin! Remember to answer as a compansionate medical professional when giving your final answer.\\n                        Previous conversation history:\\n                        \\n                        Question: Recommend something for a headache\\n                        "], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["\\nObservation:"]}' message='Post details'
urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): api.openai.com:443
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=845 request_id=66dc2ff539008e181a3878f16235e7c1 response_code=200
httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
httpx - DEBUG - load_verify_locations cafile='/Users/emanuelhc/anaconda3/envs/poc2/lib/python3.10/site-packages/certifi/cacert.pem'
httpcore.connection - DEBUG - connect_tcp.started host='duckduckgo.com' port=443 local_address=None timeout=10 socket_options=None
httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1699653f0>
httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x16a6f7dc0> server_hostname='duckduckgo.com' timeout=10
httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16a7b1900>
httpcore.http2 - DEBUG - send_connection_init.started request=<Request [b'POST']>
httpcore.http2 - DEBUG - send_connection_init.complete
httpcore.http2 - DEBUG - send_request_headers.started request=<Request [b'POST']> stream_id=1
hpack.hpack - DEBUG - Adding (b':method', b'POST') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b':authority', b'duckduckgo.com') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 1 with 6 bits
hpack.hpack - DEBUG - Encoding 11 with 7 bits
hpack.hpack - DEBUG - Adding (b':scheme', b'https') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 7 with 7 bits
hpack.hpack - DEBUG - Adding (b':path', b'/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 4 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept', b'*/*') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 19 with 6 bits
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept-encoding', b'gzip, deflate, br') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 16 with 6 bits
hpack.hpack - DEBUG - Encoding 13 with 7 bits
hpack.hpack - DEBUG - Adding (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 58 with 6 bits
hpack.hpack - DEBUG - Encoding 87 with 7 bits
hpack.hpack - DEBUG - Adding (b'referer', b'https://duckduckgo.com/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 51 with 6 bits
hpack.hpack - DEBUG - Encoding 17 with 7 bits
hpack.hpack - DEBUG - Adding (b'content-length', b'21') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 28 with 6 bits
hpack.hpack - DEBUG - Encoding 2 with 7 bits
hpack.hpack - DEBUG - Adding (b'content-type', b'application/x-www-form-urlencoded') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 31 with 6 bits
hpack.hpack - DEBUG - Encoding 24 with 7 bits
hpack.hpack - DEBUG - Encoded header block to b'\x83A\x8b\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xff\x87\x84S\x83\xf9c\xe7P\x8d\x9b\xd9\xab\xfaRB\xcb@\xd2_\xa5#\xb3z\xd7\xd0\x7ff\xa2\x81\xb0\xda\xe0S\xfa\xd02\x1a\xa4\x9d\x13\xfd\xa9\x92\xa4\x96\x854\x0c\x8aj\xdc\xa7\xe2\x81f&\xff\xb5!\xae\xba\x0b\xc8\xb1\xe62Xm\x97We\xc5?\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xeaU1\x14\x9dO\xfd\xa9z{\x0fIX\x08[\\\x0b\x81p)\xb8r\x8e\xc30\xdb.\xae\xcb\x9fs\x91\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xc7\\\x82\x10\x7f_\x98\x1du\xd0b\r&=Ly[\xc7\x8f\x0bJ{)Z\xdb(-D<\x85\x93'
httpcore.http2 - DEBUG - send_request_headers.complete
httpcore.http2 - DEBUG - send_request_body.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - send_request_body.complete
httpcore.http2 - DEBUG - receive_response_headers.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - receive_remote_settings.started
httpcore.http2 - DEBUG - receive_remote_settings.complete return_value=<RemoteSettingsChanged changed_settings:{ChangedSetting(setting=SettingCodes.MAX_CONCURRENT_STREAMS, original_value=None, new_value=64), ChangedSetting(setting=SettingCodes.INITIAL_WINDOW_SIZE, original_value=65535, new_value=65536), ChangedSetting(setting=SettingCodes.MAX_FRAME_SIZE, original_value=16384, new_value=16777215)}>
hpack.hpack - DEBUG - Decoding b' \x88v\x84\xaacU\xe7a\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbbp\x0e\\\x0b*b\xd1\xbf_\x92I|\xa5\x89\xd3M\x1fj\x12q\xd8\x82\xa6\x0e\x1b\xf0\xac\xf7{\x8b\x84\x84-i[\x05D<\x86\xaao\x00\x8aAl\xee[\x16I\xa95S\x7f\x99I\xd2:>\xe4\xb6\xc8\x1a{\xeeB\xa0\x90\x7f7FN\xa5\xaaE7\x9d#\xa3\xf9\x00\x8f\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\xc2\xa2\xda\x12\x8f\x011\x00\x91Bl1\x12\xb2l\x1dH\xac\xf6%d\x14\x96\xd8d\xfa\x8c\xa4~V\x1c\xc5\x81\x90\xb6\xcb\x80\x00?\x00\x8d\xac\xb6Rd \xc7\xa9\x0bVz\x0cO_\x8e5I-\x85BV!\xe7=\x89\x83\xfa\xfe\xff\x00\x90!\xeaIjJ\xc8)-\xb0\xc9\xf4\xb5g\xa0\xc4\xf5\xff\xe5\x07\x90\xb2\x8e\xda\x12\xb2,"\x9f\xea\xa3\xd4_\xf4\xa7\xda\x84=U\x14\x89Y\x16\x11E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\xa4u\x1aR\xa1+"\xc2(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x94\x96C\rdXE\x14\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x1f+\xc9i:\xc9i:\xccu\xc8zT\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xcd3B\xf3\xd0\xe4t^YGA\xa0\xfe\x0e;%\x8ebS\xdeSR9R\x97\x13\xe0s#\xc7\xb2{\x1c\x8b\x9e\xa3\x1e\xa6\x14\xfbQ\x04\xb0\xd5\xa5dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xf5mH\x1c\xa5X\xd5Pj\x8b\xfe\x94\xffV\xd4\x81\xcaU\x8b\xdct\x7f\xa5>\xd4\x94\xf5%dXE$\x1aGqE\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd453,\x8b\x08\xa4\x83H\xee(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x88O\xaa\n\xb2,"\x8aN\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xd7!\xe9Rt\xa6\xb4\\a\x8f\x95\xe4\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xe6\x99\xa1y\xe8r:/,\xa3\xa0\xd0\x7f\x07\x1d\x92\xc71)\xef)\xa9\x1c\xa9K\x89\xf09\x91\xe3\xd9=\x8eE\xcfQ\x8fS\n\x7f\xabj@\xe5*\xc6\xaa\x83T_\xf4\xa7\xda\x87\x8f\xa1H\x95\x91a\x14\xffU\x1e\xa2\xff\xa5>\xd4\xf0{:\x96\xc5\x91a\x14\x8e\x83\xc7qO\xb5\t9\xa8\x91dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%\xb0t\x95dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%=\x94\xac2$\xc7\xa9E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\x96\xc1\xd2U\x87Q\n\x84\x9e\xc4)\xfe\x90Z%\xffJ}\xa9\x18\xd0U\xad\xb0\xca\x7f\xa4\x16\x89\x7f\xd2\x9fjGA\xc9\xd5a\xd1B\xd4\x9b\xc9dX\x87\xa9%\xa9*}\xff\x00\x8b\xf2\xb4\xb6\x0e\x92\xacz\xd2c\xd4\x8f\x89\xdd\x0e\x8c\x1a\xb6\xe4\xc5\x93O\x00\x8c\xf2\xb7\x94!j\xec:JD\x98\xf5\x7f\x89\x0f\xdd\'\x90\xb0GA\xc9\xd7\x00\x90\xf2\xb1\x0fRKRVO\xaa\xca\xb1\xebI\x8fR?\x85\xa8\xe8\xa8\xd2\xcb\x00\x8b\xb0\xb2\x96\xcb\x0bb\xd5\x9e\x83\x13\xd7\x85=\x86\x98\xd5\x7f\x00\x87/\x9a\xcaD\xacD\xff\x87\xa4~V\x1c\xc5\x80\x1f\x00\x85/\x9a\xcdaQ\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbbp\x0e\\\x0bJb\xd1\xbf\x00\x89 \xc99V!\xeaM\x87\xa3\x87\xa4~V\x1c\xc5\x80?\x00\x8e\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\x83\x90t\x17\x84-Qp\xdd\x00\x8b!\xeaIjJ\xc5\xa8\x87\x90\xd5M\x02br'
hpack.hpack - DEBUG - Decoded 0, consumed 1 bytes
hpack.table - DEBUG - Resizing header table to 0 from 4096
hpack.hpack - DEBUG - Decoded 8, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b':status', b'200'), consumed 1
hpack.hpack - DEBUG - Decoded 54, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server', b'nginx'), total consumed 6 bytes, indexed True
hpack.hpack - DEBUG - Decoded 33, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'date', b'Wed, 13 Sep 2023 17:06:13 GMT'), total consumed 24 bytes, indexed True
hpack.hpack - DEBUG - Decoded 31, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 18, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-type', b'text/html; charset=UTF-8'), total consumed 20 bytes, indexed True
hpack.hpack - DEBUG - Decoded 59, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'vary', b'Accept-Encoding'), total consumed 13 bytes, indexed True
hpack.hpack - DEBUG - Decoded 10, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 25, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server-timing', b'total;dur=48;desc="Backend Total"'), total consumed 38 bytes, indexed False
hpack.hpack - DEBUG - Decoded 15, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-results', <memory at 0x16a718b80>), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 17, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'strict-transport-security', b'max-age=31536000'), total consumed 32 bytes, indexed False
hpack.hpack - DEBUG - Decoded 13, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'permissions-policy', b'interest-cohort=()'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1124, consumed 3 bytes
hpack.hpack - DEBUG - Decoded (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), total consumed 1145 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-frame-options', b'SAMEORIGIN'), total consumed 23 bytes, indexed False
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-xss-protection', b'1;mode=block'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-content-type-options', b'nosniff'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'referrer-policy', b'origin'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expect-ct', b'max-age=0'), total consumed 17 bytes, indexed False
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expires', b'Wed, 13 Sep 2023 17:06:14 GMT'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'cache-control', b'max-age=1'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-locale', b'en_US'), total consumed 21 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 2, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-encoding', <memory at 0x16a718dc0>), total consumed 16 bytes, indexed False
httpcore.http2 - DEBUG - receive_response_headers.complete return_value=(200, [(b'server', b'nginx'), (b'date', b'Wed, 13 Sep 2023 17:06:13 GMT'), (b'content-type', b'text/html; charset=UTF-8'), (b'vary', b'Accept-Encoding'), (b'server-timing', b'total;dur=48;desc="Backend Total"'), (b'x-duckduckgo-results', b'1'), (b'strict-transport-security', b'max-age=31536000'), (b'permissions-policy', b'interest-cohort=()'), (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), (b'x-frame-options', b'SAMEORIGIN'), (b'x-xss-protection', b'1;mode=block'), (b'x-content-type-options', b'nosniff'), (b'referrer-policy', b'origin'), (b'expect-ct', b'max-age=0'), (b'expires', b'Wed, 13 Sep 2023 17:06:14 GMT'), (b'cache-control', b'max-age=1'), (b'x-duckduckgo-locale', b'en_US'), (b'content-encoding', b'br')])
httpx - INFO - HTTP Request: POST https://duckduckgo.com "HTTP/2 200 OK"
httpcore.http2 - DEBUG - receive_response_body.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - receive_response_body.complete
httpcore.http2 - DEBUG - response_closed.started stream_id=1
httpcore.http2 - DEBUG - response_closed.complete
httpcore.connection - DEBUG - connect_tcp.started host='links.duckduckgo.com' port=443 local_address=None timeout=10 socket_options=None
httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x169a34730>
httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x16a6f7dc0> server_hostname='links.duckduckgo.com' timeout=10
httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16a7b1150>
httpcore.http2 - DEBUG - send_connection_init.started request=<Request [b'GET']>
httpcore.http2 - DEBUG - send_connection_init.complete
httpcore.http2 - DEBUG - send_request_headers.started request=<Request [b'GET']> stream_id=1
hpack.hpack - DEBUG - Adding (b':method', b'GET') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 2 with 7 bits
hpack.hpack - DEBUG - Adding (b':authority', b'links.duckduckgo.com') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 1 with 6 bits
hpack.hpack - DEBUG - Encoding 15 with 7 bits
hpack.hpack - DEBUG - Adding (b':scheme', b'https') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 7 with 7 bits
hpack.hpack - DEBUG - Adding (b':path', b'/d.js?q=Causes%20of%20headaches&kl=wt-wt&l=wt-wt&s=0&df=y&vqd=4-258305206722987951087000783267234806787&o=json&sp=0&ex=-1') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 4 with 6 bits
hpack.hpack - DEBUG - Encoding 90 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept', b'*/*') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 19 with 6 bits
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept-encoding', b'gzip, deflate, br') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 16 with 6 bits
hpack.hpack - DEBUG - Encoding 13 with 7 bits
hpack.hpack - DEBUG - Adding (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 58 with 6 bits
hpack.hpack - DEBUG - Encoding 87 with 7 bits
hpack.hpack - DEBUG - Adding (b'referer', b'https://duckduckgo.com/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 51 with 6 bits
hpack.hpack - DEBUG - Encoding 17 with 7 bits
hpack.hpack - DEBUG - Encoded header block to b'\x82A\x8f\xa0\xd5uB\xf2ZN\xb2ZN\xb3\x1dr\x1e\x9f\x87D\xdabE\xfa#\xfc\xed\x05\xe1\xda\x82\xa1Q\x00\xf2\xaa NQ\xc82NT|u\xa2\x0f\t[\xc2~(\x83\xc2V\xf0\x9f\x84@\x0f\x89%\x83\xd7\xc7~\xd2@\xd2\xc2m\xe6@\xd8\x80\xe3\xa2\x13\xef:\xfba\x03\xce\x80\x00u\xe6D\xe3\xa2e\xa7\x80\xe3\xaf;\xf0x: \xf5|"\xb8\x01\xf0_0,\x1fS\x83\xf9c\xe7P\x8d\x9b\xd9\xab\xfaRB\xcb@\xd2_\xa5#\xb3z\xd7\xd0\x7ff\xa2\x81\xb0\xda\xe0S\xfa\xd02\x1a\xa4\x9d\x13\xfd\xa9\x92\xa4\x96\x854\x0c\x8aj\xdc\xa7\xe2\x81f&\xff\xb5!\xae\xba\x0b\xc8\xb1\xe62Xm\x97We\xc5?\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xeaU1\x14\x9dO\xfd\xa9z{\x0fIX\x08[\\\x0b\x81p)\xb8r\x8e\xc30\xdb.\xae\xcb\x9fs\x91\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xc7'
httpcore.http2 - DEBUG - send_request_headers.complete
httpcore.http2 - DEBUG - send_request_body.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - send_request_body.complete
httpcore.http2 - DEBUG - receive_response_headers.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - receive_remote_settings.started
httpcore.http2 - DEBUG - receive_remote_settings.complete return_value=<RemoteSettingsChanged changed_settings:{ChangedSetting(setting=SettingCodes.MAX_CONCURRENT_STREAMS, original_value=None, new_value=64), ChangedSetting(setting=SettingCodes.INITIAL_WINDOW_SIZE, original_value=65535, new_value=65536), ChangedSetting(setting=SettingCodes.MAX_FRAME_SIZE, original_value=16384, new_value=16777215)}>
hpack.hpack - DEBUG - Decoding b' \x88v\x84\xaacU\xe7a\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbbp\x0e\\\x0bJb\xd1\xbf_\x97\x1du\xd0b\r&=LtA\xea\xfbP\x93\x8e\xc4\x150p\xdf\x85g\xbf{\x8b\x84\x84-i[\x05D<\x86\xaao\x00\x85/\x9a\xcdaQ\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbbp\x0e\\\x0b*b\xd1\xbf\x00\x8aAl\xee[\x16I\xa95S\x7f\x9aI\xd2:>\xe4\xb6\xc8\x1dy\xff\xb9\n\x82A\xfc\xdd\x19:\x96\xa9\x14\xdet\x8e\x8f\xe7\x00\x91Bl1\x12\xb2l\x1dH\xac\xf6%d\x14\x96\xd8d\xfa\x8c\xa4~V\x1c\xc5\x81\x90\xb6\xcb\x80\x00?\x00\x8d\xac\xb6Rd \xc7\xa9\x0bVz\x0cO_\x8e5I-\x85BV!\xe7=\x89\x83\xfa\xfe\xff\x00\x90!\xeaIjJ\xc8)-\xb0\xc9\xf4\xb5g\xa0\xc4\xf5\xff\xe5\x07\x90\xb2\x8e\xda\x12\xb2,"\x9f\xea\xa3\xd4_\xf4\xa7\xda\x84=U\x14\x89Y\x16\x11E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\xa4u\x1aR\xa1+"\xc2(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x94\x96C\rdXE\x14\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x1f+\xc9i:\xc9i:\xccu\xc8zT\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xcd3B\xf3\xd0\xe4t^YGA\xa0\xfe\x0e;%\x8ebS\xdeSR9R\x97\x13\xe0s#\xc7\xb2{\x1c\x8b\x9e\xa3\x1e\xa6\x14\xfbQ\x04\xb0\xd5\xa5dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xf5mH\x1c\xa5X\xd5Pj\x8b\xfe\x94\xffV\xd4\x81\xcaU\x8b\xdct\x7f\xa5>\xd4\x94\xf5%dXE$\x1aGqE\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd453,\x8b\x08\xa4\x83H\xee(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x88O\xaa\n\xb2,"\x8aN\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xd7!\xe9Rt\xa6\xb4\\a\x8f\x95\xe4\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xe6\x99\xa1y\xe8r:/,\xa3\xa0\xd0\x7f\x07\x1d\x92\xc71)\xef)\xa9\x1c\xa9K\x89\xf09\x91\xe3\xd9=\x8eE\xcfQ\x8fS\n\x7f\xabj@\xe5*\xc6\xaa\x83T_\xf4\xa7\xda\x87\x8f\xa1H\x95\x91a\x14\xffU\x1e\xa2\xff\xa5>\xd4\xf0{:\x96\xc5\x91a\x14\x8e\x83\xc7qO\xb5\t9\xa8\x91dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%\xb0t\x95dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%=\x94\xac2$\xc7\xa9E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\x96\xc1\xd2U\x87Q\n\x84\x9e\xc4)\xfe\x90Z%\xffJ}\xa9\x18\xd0U\xad\xb0\xca\x7f\xa4\x16\x89\x7f\xd2\x9fjGA\xc9\xd5a\xd1B\xd4\x9b\xc9dX\x87\xa9%\xa9*}\xff\x00\x8b\xf2\xb4\xb6\x0e\x92\xacz\xd2c\xd4\x8f\x89\xdd\x0e\x8c\x1a\xb6\xe4\xc5\x93O\x00\x8c\xf2\xb7\x94!j\xec:JD\x98\xf5\x7f\x89\x0f\xdd\'\x90\xb0GA\xc9\xd7\x00\x90\xf2\xb1\x0fRKRVO\xaa\xca\xb1\xebI\x8fR?\x85\xa8\xe8\xa8\xd2\xcb\x00\x8b\xb0\xb2\x96\xcb\x0bb\xd5\x9e\x83\x13\xd7\x85=\x86\x98\xd5\x7f\x00\x87/\x9a\xcaD\xacD\xff\x87\xa4~V\x1c\xc5\x80\x1f\x00\x89 \xc99V!\xeaM\x87\xa3\x86\xa8\xeb\x10d\x9c\xbf\x00\x8e\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\x83\x90t\x17\x84-Qp\xdd\x00\x8b!\xeaIjJ\xc5\xa8\x87\x90\xd5M\x02br'
hpack.hpack - DEBUG - Decoded 0, consumed 1 bytes
hpack.table - DEBUG - Resizing header table to 0 from 4096
hpack.hpack - DEBUG - Decoded 8, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b':status', b'200'), consumed 1
hpack.hpack - DEBUG - Decoded 54, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server', b'nginx'), total consumed 6 bytes, indexed True
hpack.hpack - DEBUG - Decoded 33, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'date', b'Wed, 13 Sep 2023 17:06:14 GMT'), total consumed 24 bytes, indexed True
hpack.hpack - DEBUG - Decoded 31, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 23, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-type', b'application/json; charset=UTF-8'), total consumed 25 bytes, indexed True
hpack.hpack - DEBUG - Decoded 59, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'vary', b'Accept-Encoding'), total consumed 13 bytes, indexed True
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expires', b'Wed, 13 Sep 2023 17:06:13 GMT'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 10, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 26, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server-timing', b'total;dur=789;desc="Backend Total"'), total consumed 39 bytes, indexed False
hpack.hpack - DEBUG - Decoded 17, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'strict-transport-security', b'max-age=31536000'), total consumed 32 bytes, indexed False
hpack.hpack - DEBUG - Decoded 13, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'permissions-policy', b'interest-cohort=()'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1124, consumed 3 bytes
hpack.hpack - DEBUG - Decoded (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), total consumed 1145 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-frame-options', b'SAMEORIGIN'), total consumed 23 bytes, indexed False
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-xss-protection', b'1;mode=block'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-content-type-options', b'nosniff'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'referrer-policy', b'origin'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expect-ct', b'max-age=0'), total consumed 17 bytes, indexed False
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 6, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'cache-control', b'no-cache'), total consumed 18 bytes, indexed False
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-locale', b'en_US'), total consumed 21 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 2, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-encoding', <memory at 0x16a718ac0>), total consumed 16 bytes, indexed False
httpcore.http2 - DEBUG - receive_response_headers.complete return_value=(200, [(b'server', b'nginx'), (b'date', b'Wed, 13 Sep 2023 17:06:14 GMT'), (b'content-type', b'application/json; charset=UTF-8'), (b'vary', b'Accept-Encoding'), (b'expires', b'Wed, 13 Sep 2023 17:06:13 GMT'), (b'server-timing', b'total;dur=789;desc="Backend Total"'), (b'strict-transport-security', b'max-age=31536000'), (b'permissions-policy', b'interest-cohort=()'), (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), (b'x-frame-options', b'SAMEORIGIN'), (b'x-xss-protection', b'1;mode=block'), (b'x-content-type-options', b'nosniff'), (b'referrer-policy', b'origin'), (b'expect-ct', b'max-age=0'), (b'cache-control', b'no-cache'), (b'x-duckduckgo-locale', b'en_US'), (b'content-encoding', b'br')])
httpx - INFO - HTTP Request: GET https://links.duckduckgo.com/d.js?q=Causes%20of%20headaches&kl=wt-wt&l=wt-wt&s=0&df=y&vqd=4-258305206722987951087000783267234806787&o=json&sp=0&ex=-1 "HTTP/2 200 OK"
httpcore.http2 - DEBUG - receive_response_body.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - receive_response_body.complete
httpcore.http2 - DEBUG - response_closed.started stream_id=1
httpcore.http2 - DEBUG - response_closed.complete
httpcore.connection - DEBUG - close.started
httpcore.connection - DEBUG - close.complete
httpcore.connection - DEBUG - close.started
httpcore.connection - DEBUG - close.complete
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["Answer the following questions as best you can, but speaking as compasionate medical professional. You have access to the following tools:\\n\\n                        Web Search: useful for when you need to answer questions about current events\\nSearch WebMD: useful for when you need to answer medical and pharmalogical questions\\n\\n                        Use the following format:\\n\\n                        Question: the input question you must answer\\n                        Thought: you should always think about what to do\\n                        Action: the action to take, should be one of [Web Search, Search WebMD]\\n                        Action Input: the input to the action\\n                        Observation: the result of the action\\n                        ... (this Thought/Action/Action Input/Observation can repeat N times)\\n                        Thought: I now know the final answer\\n                        Final Answer: the final answer to the original input question\\n\\n                        Begin! Remember to answer as a compansionate medical professional when giving your final answer.\\n                        Previous conversation history:\\n                        \\n                        Question: Recommend something for a headache\\n                        \\nThought: I should consider the cause of the headache before recommending something.\\nAction: Web Search\\nAction Input: Causes of headaches\\nObservation: Stress Stress can cause tight muscles in the shoulders and neck, which often leads to tension headaches. When tension headaches become frequent, the pain in shoulder and neck muscles is felt by the brain as pain in the head. Hunger itself can trigger a migraine or tension headache. But eating certain foods may trigger migraines. There are many different types and causes of headaches, such as migraine, tension-type, cluster, sinus, and hypnic headaches. Medication overuse can also lead to a headache when a person... Prodrome One or two days before a migraine, you might notice subtle changes that warn of an upcoming migraine, including: Constipation. Mood changes, from depression to euphoria. Food cravings. Neck stiffness. Increased urination. Fluid retention. Frequent yawning. Aura For some people, an aura might occur before or during migraines. hemicrania continua ice pick headache thunderclap headache allergy or sinus headache hormone headache (also known as menstrual migraine) caffeine headache exertion headache hypertension... Secondary headaches are often caused by a minor head injury or medication overuse. They\'re also associated with underlying medical conditions, such as: high blood pressure. infection of the ...\\nThought: "], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["\\nObservation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1772 request_id=4d63d053fee72722063c767a3ebea5c3 response_code=200
google.auth.transport.requests - DEBUG - Making request: POST https://oauth2.googleapis.com/token
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): oauth2.googleapis.com:443
urllib3.connectionpool - DEBUG - https://oauth2.googleapis.com:443 "POST /token HTTP/1.1" 200 None
googleapiclient.discovery_cache - INFO - file_cache is only supported with oauth2client<4.0.0
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\n"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): api.openai.com:443
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1569 request_id=98a630abbdc7fbccb392999f1b181c08 response_code=200
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages?q=is%3Adraft&maxResults=10&alt=json
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/18a8f3bbf6920777?format=raw&alt=json
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/189323b4db3d623e?format=raw&alt=json
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\nThis was your previous work (but I haven\'t seen any of it! I only see what you return as final answer):\\nAction:\\n```\\n{\\n  \\"action\\": \\"search_gmail\\",\\n  \\"action_input\\": {\\n    \\"query\\": \\"is:draft\\"\\n  }\\n}\\n```\\n\\n\\nObservation: [{\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}, {\'id\': \'189323b4db3d623e\', \'threadId\': \'1893149e52ba6829\', \'snippet\': \'Glad it worked! El vie, 7 jul 2023 a las 10:57, Zoltan Prokai (&lt;zoltan@skillfulai.io&gt;) escribi\\u00f3: Seems to be working fine! Gracias!! Z\', \'body\': \'Glad it worked! \\\\r\\\\n\\\\r\\\\nEl vie, 7 jul 2023 a las 10:57, Zoltan Prokai () \\\\r\\\\nescribi\\u00f3:\\\\r\\\\n\\\\r\\\\n> Seems to be working fine! \\\\r\\\\n>\\\\r\\\\n> Gracias!!\\\\r\\\\n>\\\\r\\\\n> Z\\\\r\\\\n>\\\\r\\\\n\', \'subject\': \'Re: Greetings\', \'sender\': \'Emanuel Hernandez Castillo <emanuel@skillfulai.io>\'}]\\nThought:"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2188 request_id=aa8170fb51f77104d0633699c16f1c49 response_code=200
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/18a8f3bbf6920777?format=raw&alt=json
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\nThis was your previous work (but I haven\'t seen any of it! I only see what you return as final answer):\\nAction:\\n```\\n{\\n  \\"action\\": \\"search_gmail\\",\\n  \\"action_input\\": {\\n    \\"query\\": \\"is:draft\\"\\n  }\\n}\\n```\\n\\n\\nObservation: [{\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}, {\'id\': \'189323b4db3d623e\', \'threadId\': \'1893149e52ba6829\', \'snippet\': \'Glad it worked! El vie, 7 jul 2023 a las 10:57, Zoltan Prokai (&lt;zoltan@skillfulai.io&gt;) escribi\\u00f3: Seems to be working fine! Gracias!! Z\', \'body\': \'Glad it worked! \\\\r\\\\n\\\\r\\\\nEl vie, 7 jul 2023 a las 10:57, Zoltan Prokai () \\\\r\\\\nescribi\\u00f3:\\\\r\\\\n\\\\r\\\\n> Seems to be working fine! \\\\r\\\\n>\\\\r\\\\n> Gracias!!\\\\r\\\\n>\\\\r\\\\n> Z\\\\r\\\\n>\\\\r\\\\n\', \'subject\': \'Re: Greetings\', \'sender\': \'Emanuel Hernandez Castillo <emanuel@skillfulai.io>\'}]\\nThought: Retrieve the content of the last email draft\\nAction:\\n```\\n{\\n  \\"action\\": \\"get_gmail_message\\",\\n  \\"action_input\\": {\\n    \\"message_id\\": \\"18a8f3bbf6920777\\"\\n  }\\n}\\n```\\n\\n\\nObservation: {\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}\\nThought:"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1650 request_id=5a8a8190649ab0edf313145d267af4a3 response_code=200
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["Answer the following questions as best you can, but speaking as compasionate medical professional. You have access to the following tools:\\n\\n                        Web Search: useful for when you need to answer questions about current events\\nSearch WebMD: useful for when you need to answer medical and pharmalogical questions\\n\\n                        Use the following format:\\n\\n                        Question: the input question you must answer\\n                        Thought: you should always think about what to do\\n                        Action: the action to take, should be one of [Web Search, Search WebMD]\\n                        Action Input: the input to the action\\n                        Observation: the result of the action\\n                        ... (this Thought/Action/Action Input/Observation can repeat N times)\\n                        Thought: I now know the final answer\\n                        Final Answer: the final answer to the original input question\\n\\n                        Begin! Remember to answer as a compansionate medical professional when giving your final answer.\\n                        Previous conversation history:\\n                        \\n                        Question: I\'m feeling some pain on my neck please suggest a treatment \\n                        "], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["\\nObservation:"]}' message='Post details'
urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): api.openai.com:443
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1328 request_id=c980004db4b10bddf5e31367efc1970e response_code=200
httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
httpx - DEBUG - load_verify_locations cafile='/Users/emanuelhc/anaconda3/envs/poc2/lib/python3.10/site-packages/certifi/cacert.pem'
httpcore.connection - DEBUG - connect_tcp.started host='duckduckgo.com' port=443 local_address=None timeout=10 socket_options=None
httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16be66c80>
httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x137ae1140> server_hostname='duckduckgo.com' timeout=10
httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14d1d82b0>
httpcore.http2 - DEBUG - send_connection_init.started request=<Request [b'POST']>
httpcore.http2 - DEBUG - send_connection_init.complete
httpcore.http2 - DEBUG - send_request_headers.started request=<Request [b'POST']> stream_id=1
hpack.hpack - DEBUG - Adding (b':method', b'POST') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b':authority', b'duckduckgo.com') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 1 with 6 bits
hpack.hpack - DEBUG - Encoding 11 with 7 bits
hpack.hpack - DEBUG - Adding (b':scheme', b'https') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 7 with 7 bits
hpack.hpack - DEBUG - Adding (b':path', b'/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 4 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept', b'*/*') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 19 with 6 bits
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept-encoding', b'gzip, deflate, br') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 16 with 6 bits
hpack.hpack - DEBUG - Encoding 13 with 7 bits
hpack.hpack - DEBUG - Adding (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 58 with 6 bits
hpack.hpack - DEBUG - Encoding 87 with 7 bits
hpack.hpack - DEBUG - Adding (b'referer', b'https://duckduckgo.com/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 51 with 6 bits
hpack.hpack - DEBUG - Encoding 17 with 7 bits
hpack.hpack - DEBUG - Adding (b'content-length', b'21') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 28 with 6 bits
hpack.hpack - DEBUG - Encoding 2 with 7 bits
hpack.hpack - DEBUG - Adding (b'content-type', b'application/x-www-form-urlencoded') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 31 with 6 bits
hpack.hpack - DEBUG - Encoding 24 with 7 bits
hpack.hpack - DEBUG - Encoded header block to b'\x83A\x8b\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xff\x87\x84S\x83\xf9c\xe7P\x8d\x9b\xd9\xab\xfaRB\xcb@\xd2_\xa5#\xb3z\xd7\xd0\x7ff\xa2\x81\xb0\xda\xe0S\xfa\xd02\x1a\xa4\x9d\x13\xfd\xa9\x92\xa4\x96\x854\x0c\x8aj\xdc\xa7\xe2\x81f&\xff\xb5!\xae\xba\x0b\xc8\xb1\xe62Xm\x97We\xc5?\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xeaU1\x14\x9dO\xfd\xa9z{\x0fIX\x08[\\\x0b\x81p)\xb8r\x8e\xc30\xdb.\xae\xcb\x9fs\x91\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xc7\\\x82\x10\x7f_\x98\x1du\xd0b\r&=Ly[\xc7\x8f\x0bJ{)Z\xdb(-D<\x85\x93'
httpcore.http2 - DEBUG - send_request_headers.complete
httpcore.http2 - DEBUG - send_request_body.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - send_request_body.complete
httpcore.http2 - DEBUG - receive_response_headers.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - receive_remote_settings.started
httpcore.http2 - DEBUG - receive_remote_settings.complete return_value=<RemoteSettingsChanged changed_settings:{ChangedSetting(setting=SettingCodes.MAX_CONCURRENT_STREAMS, original_value=None, new_value=64), ChangedSetting(setting=SettingCodes.INITIAL_WINDOW_SIZE, original_value=65535, new_value=65536), ChangedSetting(setting=SettingCodes.MAX_FRAME_SIZE, original_value=16384, new_value=16777215)}>
hpack.hpack - DEBUG - Decoding b' \x88v\x84\xaacU\xe7a\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbfp-\\i\xe51h\xdf_\x92I|\xa5\x89\xd3M\x1fj\x12q\xd8\x82\xa6\x0e\x1b\xf0\xac\xf7{\x8b\x84\x84-i[\x05D<\x86\xaao\x00\x8aAl\xee[\x16I\xa95S\x7f\x99I\xd2:>\xe4\xb6\xc8\x1ao\xeeB\xa0\x90\x7f7FN\xa5\xaaE7\x9d#\xa3\xf9\x00\x8f\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\xc2\xa2\xda\x12\x8f\x011\x00\x91Bl1\x12\xb2l\x1dH\xac\xf6%d\x14\x96\xd8d\xfa\x8c\xa4~V\x1c\xc5\x81\x90\xb6\xcb\x80\x00?\x00\x8d\xac\xb6Rd \xc7\xa9\x0bVz\x0cO_\x8e5I-\x85BV!\xe7=\x89\x83\xfa\xfe\xff\x00\x90!\xeaIjJ\xc8)-\xb0\xc9\xf4\xb5g\xa0\xc4\xf5\xff\xe5\x07\x90\xb2\x8e\xda\x12\xb2,"\x9f\xea\xa3\xd4_\xf4\xa7\xda\x84=U\x14\x89Y\x16\x11E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\xa4u\x1aR\xa1+"\xc2(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x94\x96C\rdXE\x14\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x1f+\xc9i:\xc9i:\xccu\xc8zT\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xcd3B\xf3\xd0\xe4t^YGA\xa0\xfe\x0e;%\x8ebS\xdeSR9R\x97\x13\xe0s#\xc7\xb2{\x1c\x8b\x9e\xa3\x1e\xa6\x14\xfbQ\x04\xb0\xd5\xa5dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xf5mH\x1c\xa5X\xd5Pj\x8b\xfe\x94\xffV\xd4\x81\xcaU\x8b\xdct\x7f\xa5>\xd4\x94\xf5%dXE$\x1aGqE\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd453,\x8b\x08\xa4\x83H\xee(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x88O\xaa\n\xb2,"\x8aN\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xd7!\xe9Rt\xa6\xb4\\a\x8f\x95\xe4\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xe6\x99\xa1y\xe8r:/,\xa3\xa0\xd0\x7f\x07\x1d\x92\xc71)\xef)\xa9\x1c\xa9K\x89\xf09\x91\xe3\xd9=\x8eE\xcfQ\x8fS\n\x7f\xabj@\xe5*\xc6\xaa\x83T_\xf4\xa7\xda\x87\x8f\xa1H\x95\x91a\x14\xffU\x1e\xa2\xff\xa5>\xd4\xf0{:\x96\xc5\x91a\x14\x8e\x83\xc7qO\xb5\t9\xa8\x91dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%\xb0t\x95dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%=\x94\xac2$\xc7\xa9E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\x96\xc1\xd2U\x87Q\n\x84\x9e\xc4)\xfe\x90Z%\xffJ}\xa9\x18\xd0U\xad\xb0\xca\x7f\xa4\x16\x89\x7f\xd2\x9fjGA\xc9\xd5a\xd1B\xd4\x9b\xc9dX\x87\xa9%\xa9*}\xff\x00\x8b\xf2\xb4\xb6\x0e\x92\xacz\xd2c\xd4\x8f\x89\xdd\x0e\x8c\x1a\xb6\xe4\xc5\x93O\x00\x8c\xf2\xb7\x94!j\xec:JD\x98\xf5\x7f\x89\x0f\xdd\'\x90\xb0GA\xc9\xd7\x00\x90\xf2\xb1\x0fRKRVO\xaa\xca\xb1\xebI\x8fR?\x85\xa8\xe8\xa8\xd2\xcb\x00\x8b\xb0\xb2\x96\xcb\x0bb\xd5\x9e\x83\x13\xd7\x85=\x86\x98\xd5\x7f\x00\x87/\x9a\xcaD\xacD\xff\x87\xa4~V\x1c\xc5\x80\x1f\x00\x85/\x9a\xcdaQ\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbfp-\\i\xf51h\xdf\x00\x89 \xc99V!\xeaM\x87\xa3\x87\xa4~V\x1c\xc5\x80?\x00\x8e\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\x83\x90t\x17\x84-Qp\xdd\x00\x8b!\xeaIjJ\xc5\xa8\x87\x90\xd5M\x02br'
hpack.hpack - DEBUG - Decoded 0, consumed 1 bytes
hpack.table - DEBUG - Resizing header table to 0 from 4096
hpack.hpack - DEBUG - Decoded 8, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b':status', b'200'), consumed 1
hpack.hpack - DEBUG - Decoded 54, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server', b'nginx'), total consumed 6 bytes, indexed True
hpack.hpack - DEBUG - Decoded 33, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'date', b'Wed, 13 Sep 2023 19:14:48 GMT'), total consumed 24 bytes, indexed True
hpack.hpack - DEBUG - Decoded 31, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 18, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-type', b'text/html; charset=UTF-8'), total consumed 20 bytes, indexed True
hpack.hpack - DEBUG - Decoded 59, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'vary', b'Accept-Encoding'), total consumed 13 bytes, indexed True
hpack.hpack - DEBUG - Decoded 10, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 25, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server-timing', b'total;dur=45;desc="Backend Total"'), total consumed 38 bytes, indexed False
hpack.hpack - DEBUG - Decoded 15, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-results', <memory at 0x16a94d300>), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 17, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'strict-transport-security', b'max-age=31536000'), total consumed 32 bytes, indexed False
hpack.hpack - DEBUG - Decoded 13, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'permissions-policy', b'interest-cohort=()'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1124, consumed 3 bytes
hpack.hpack - DEBUG - Decoded (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), total consumed 1145 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-frame-options', b'SAMEORIGIN'), total consumed 23 bytes, indexed False
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-xss-protection', b'1;mode=block'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-content-type-options', b'nosniff'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'referrer-policy', b'origin'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expect-ct', b'max-age=0'), total consumed 17 bytes, indexed False
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expires', b'Wed, 13 Sep 2023 19:14:49 GMT'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'cache-control', b'max-age=1'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-locale', b'en_US'), total consumed 21 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 2, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-encoding', <memory at 0x16a94d540>), total consumed 16 bytes, indexed False
httpcore.http2 - DEBUG - receive_response_headers.complete return_value=(200, [(b'server', b'nginx'), (b'date', b'Wed, 13 Sep 2023 19:14:48 GMT'), (b'content-type', b'text/html; charset=UTF-8'), (b'vary', b'Accept-Encoding'), (b'server-timing', b'total;dur=45;desc="Backend Total"'), (b'x-duckduckgo-results', b'1'), (b'strict-transport-security', b'max-age=31536000'), (b'permissions-policy', b'interest-cohort=()'), (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), (b'x-frame-options', b'SAMEORIGIN'), (b'x-xss-protection', b'1;mode=block'), (b'x-content-type-options', b'nosniff'), (b'referrer-policy', b'origin'), (b'expect-ct', b'max-age=0'), (b'expires', b'Wed, 13 Sep 2023 19:14:49 GMT'), (b'cache-control', b'max-age=1'), (b'x-duckduckgo-locale', b'en_US'), (b'content-encoding', b'br')])
httpx - INFO - HTTP Request: POST https://duckduckgo.com "HTTP/2 200 OK"
httpcore.http2 - DEBUG - receive_response_body.started request=<Request [b'POST']> stream_id=1
httpcore.http2 - DEBUG - receive_response_body.complete
httpcore.http2 - DEBUG - response_closed.started stream_id=1
httpcore.http2 - DEBUG - response_closed.complete
httpcore.connection - DEBUG - connect_tcp.started host='links.duckduckgo.com' port=443 local_address=None timeout=10 socket_options=None
httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16aa80040>
httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x137ae1140> server_hostname='links.duckduckgo.com' timeout=10
httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14d1dbd30>
httpcore.http2 - DEBUG - send_connection_init.started request=<Request [b'GET']>
httpcore.http2 - DEBUG - send_connection_init.complete
httpcore.http2 - DEBUG - send_request_headers.started request=<Request [b'GET']> stream_id=1
hpack.hpack - DEBUG - Adding (b':method', b'GET') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 2 with 7 bits
hpack.hpack - DEBUG - Adding (b':authority', b'links.duckduckgo.com') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 1 with 6 bits
hpack.hpack - DEBUG - Encoding 15 with 7 bits
hpack.hpack - DEBUG - Adding (b':scheme', b'https') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 7 with 7 bits
hpack.hpack - DEBUG - Adding (b':path', b'/d.js?q=causes%20of%20neck%20pain&kl=wt-wt&l=wt-wt&s=0&df=y&vqd=4-74791542626849457195594700353869603104&o=json&sp=0&ex=-1') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 4 with 6 bits
hpack.hpack - DEBUG - Encoding 91 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept', b'*/*') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 19 with 6 bits
hpack.hpack - DEBUG - Encoding 3 with 7 bits
hpack.hpack - DEBUG - Adding (b'accept-encoding', b'gzip, deflate, br') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 16 with 6 bits
hpack.hpack - DEBUG - Encoding 13 with 7 bits
hpack.hpack - DEBUG - Adding (b'user-agent', b'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 58 with 6 bits
hpack.hpack - DEBUG - Encoding 87 with 7 bits
hpack.hpack - DEBUG - Adding (b'referer', b'https://duckduckgo.com/') to the header table, sensitive:False, huffman:True
hpack.hpack - DEBUG - Encoding 51 with 6 bits
hpack.hpack - DEBUG - Encoding 17 with 7 bits
hpack.hpack - DEBUG - Encoded header block to b"\x82A\x8f\xa0\xd5uB\xf2ZN\xb2ZN\xb3\x1dr\x1e\x9f\x87D\xdbbE\xfa#\xfc\xed\x01\x07j\n\x85D\x03\xca\xa8\x81QI\xd5Q\x02\xb1\x9a\xaf\x8e\xb4A\xe1+xO\xc5\x10xJ\xde\x13\xf0\x88\x01\xf1$\xb0z\xf8\xef\xdaH\x1aY\xd6\x9d|-\xb4'\x04\xe3\xcd>\xd3n\x85\xf6\xdb}\xa7@\x06[e\xe7\x1fp\x0c\x84\r|\x1e\x0e\x88=_\x08\xae\x00|\x17\xcc\x0b\x07S\x83\xf9c\xe7P\x8d\x9b\xd9\xab\xfaRB\xcb@\xd2_\xa5#\xb3z\xd7\xd0\x7ff\xa2\x81\xb0\xda\xe0S\xfa\xd02\x1a\xa4\x9d\x13\xfd\xa9\x92\xa4\x96\x854\x0c\x8aj\xdc\xa7\xe2\x81f&\xff\xb5!\xae\xba\x0b\xc8\xb1\xe62Xm\x97We\xc5?\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xeaU1\x14\x9dO\xfd\xa9z{\x0fIX\x08[\\\x0b\x81p)\xb8r\x8e\xc30\xdb.\xae\xcb\x9fs\x91\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xc7"
httpcore.http2 - DEBUG - send_request_headers.complete
httpcore.http2 - DEBUG - send_request_body.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - send_request_body.complete
httpcore.http2 - DEBUG - receive_response_headers.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - receive_remote_settings.started
httpcore.http2 - DEBUG - receive_remote_settings.complete return_value=<RemoteSettingsChanged changed_settings:{ChangedSetting(setting=SettingCodes.MAX_CONCURRENT_STREAMS, original_value=None, new_value=64), ChangedSetting(setting=SettingCodes.INITIAL_WINDOW_SIZE, original_value=65535, new_value=65536), ChangedSetting(setting=SettingCodes.MAX_FRAME_SIZE, original_value=16384, new_value=16777215)}>
hpack.hpack - DEBUG - Decoding b' \x88v\x84\xaacU\xe7a\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbfp-\\i\xf51h\xdf_\x97\x1du\xd0b\r&=LtA\xea\xfbP\x93\x8e\xc4\x150p\xdf\x85g\xbf{\x8b\x84\x84-i[\x05D<\x86\xaao\x00\x85/\x9a\xcdaQ\x96\xe4Y>\x94\x0b*n-j\x08\x02e@\xbfp-\\i\xe51h\xdf\x00\x8aAl\xee[\x16I\xa95S\x7f\x9aI\xd2:>\xe4\xb6\xc8\x1cu\xef\xb9\n\x82A\xfc\xdd\x19:\x96\xa9\x14\xdet\x8e\x8f\xe7\x00\x91Bl1\x12\xb2l\x1dH\xac\xf6%d\x14\x96\xd8d\xfa\x8c\xa4~V\x1c\xc5\x81\x90\xb6\xcb\x80\x00?\x00\x8d\xac\xb6Rd \xc7\xa9\x0bVz\x0cO_\x8e5I-\x85BV!\xe7=\x89\x83\xfa\xfe\xff\x00\x90!\xeaIjJ\xc8)-\xb0\xc9\xf4\xb5g\xa0\xc4\xf5\xff\xe5\x07\x90\xb2\x8e\xda\x12\xb2,"\x9f\xea\xa3\xd4_\xf4\xa7\xda\x84=U\x14\x89Y\x16\x11E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\xa4u\x1aR\xa1+"\xc2(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x94\x96C\rdXE\x14\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x1f+\xc9i:\xc9i:\xccu\xc8zT\x9d)\xad\x17\x18bKI\xd6KI\xd6c\xcd3B\xf3\xd0\xe4t^YGA\xa0\xfe\x0e;%\x8ebS\xdeSR9R\x97\x13\xe0s#\xc7\xb2{\x1c\x8b\x9e\xa3\x1e\xa6\x14\xfbQ\x04\xb0\xd5\xa5dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xf5mH\x1c\xa5X\xd5Pj\x8b\xfe\x94\xffV\xd4\x81\xcaU\x8b\xdct\x7f\xa5>\xd4\x94\xf5%dXE$\x1aGqE\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd453,\x8b\x08\xa4\x83H\xee(\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\xf9^KI\xd6KI\xd6c\xaeC\xd2\xa4\xe9Mh\xb8\xc3\x12ZN\xb2ZN\xb3\x1ei\x9a\x17\x9e\x87#\xa2\xf2\xca:\r\x07\xf0q\xd9,s\x12\x9e\xf2\x9a\x91\xca\x94\xb8\x9f\x03\x99\x1e=\x93\xd8\xe4\\\xf5\x18\xf50\xa7\xda\x88O\xaa\n\xb2,"\x8aN\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xd7!\xe9Rt\xa6\xb4\\a\x8f\x95\xe4\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1%\xa4\xeb%\xa4\xeb1\xe6\x99\xa1y\xe8r:/,\xa3\xa0\xd0\x7f\x07\x1d\x92\xc71)\xef)\xa9\x1c\xa9K\x89\xf09\x91\xe3\xd9=\x8eE\xcfQ\x8fS\n\x7f\xabj@\xe5*\xc6\xaa\x83T_\xf4\xa7\xda\x87\x8f\xa1H\x95\x91a\x14\xffU\x1e\xa2\xff\xa5>\xd4\xf0{:\x96\xc5\x91a\x14\x8e\x83\xc7qO\xb5\t9\xa8\x91dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%\xb0t\x95dXE#\xa0\xf1\xdcQI\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df:\xe4=*N\x94\xd6\x8b\x8c1\xf2\xbc\x96\x93\xac\x96\x93\xac\xc7\\\x87\xa5I\xd2\x9a\xd1q\x86$\xb4\x9dd\xb4\x9df<\xd34/=\x0eGE\xe5\x94t\x1a\x0f\xe0\xe3\xb2X\xe6%=\xe55#\x95)q>\x072<{\'\xb1\xc8\xb9\xea1\xeaaO\xb5%=\x94\xac2$\xc7\xa9E\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xeb\x90\xf4\xa9:SZ.0\xc7\xca\xf2ZN\xb2ZN\xb3\x1dr\x1e\x95\'JkE\xc6\x18\x92\xd2u\x92\xd2u\x98\xf3L\xd0\xbc\xf49\x1d\x17\x96Q\xd0h?\x83\x8e\xc9c\x98\x94\xf7\x94\xd4\x8eT\xa5\xc4\xf8\x1c\xc8\xf1\xec\x9e\xc7"\xe7\xa8\xc7\xa9\x85>\xd4\x96\xc1\xd2U\x87Q\n\x84\x9e\xc4)\xfe\x90Z%\xffJ}\xa9\x18\xd0U\xad\xb0\xca\x7f\xa4\x16\x89\x7f\xd2\x9fjGA\xc9\xd5a\xd1B\xd4\x9b\xc9dX\x87\xa9%\xa9*}\xff\x00\x8b\xf2\xb4\xb6\x0e\x92\xacz\xd2c\xd4\x8f\x89\xdd\x0e\x8c\x1a\xb6\xe4\xc5\x93O\x00\x8c\xf2\xb7\x94!j\xec:JD\x98\xf5\x7f\x89\x0f\xdd\'\x90\xb0GA\xc9\xd7\x00\x90\xf2\xb1\x0fRKRVO\xaa\xca\xb1\xebI\x8fR?\x85\xa8\xe8\xa8\xd2\xcb\x00\x8b\xb0\xb2\x96\xcb\x0bb\xd5\x9e\x83\x13\xd7\x85=\x86\x98\xd5\x7f\x00\x87/\x9a\xcaD\xacD\xff\x87\xa4~V\x1c\xc5\x80\x1f\x00\x89 \xc99V!\xeaM\x87\xa3\x86\xa8\xeb\x10d\x9c\xbf\x00\x8e\xf2\xb4\x96\x93\xac\x96\x93\xac\xc7Z\x83\x90t\x17\x84-Qp\xdd\x00\x8b!\xeaIjJ\xc5\xa8\x87\x90\xd5M\x02br'
hpack.hpack - DEBUG - Decoded 0, consumed 1 bytes
hpack.table - DEBUG - Resizing header table to 0 from 4096
hpack.hpack - DEBUG - Decoded 8, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b':status', b'200'), consumed 1
hpack.hpack - DEBUG - Decoded 54, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server', b'nginx'), total consumed 6 bytes, indexed True
hpack.hpack - DEBUG - Decoded 33, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'date', b'Wed, 13 Sep 2023 19:14:49 GMT'), total consumed 24 bytes, indexed True
hpack.hpack - DEBUG - Decoded 31, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 23, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-type', b'application/json; charset=UTF-8'), total consumed 25 bytes, indexed True
hpack.hpack - DEBUG - Decoded 59, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'vary', b'Accept-Encoding'), total consumed 13 bytes, indexed True
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 22, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expires', b'Wed, 13 Sep 2023 19:14:48 GMT'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 10, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 26, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'server-timing', b'total;dur=678;desc="Backend Total"'), total consumed 39 bytes, indexed False
hpack.hpack - DEBUG - Decoded 17, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'strict-transport-security', b'max-age=31536000'), total consumed 32 bytes, indexed False
hpack.hpack - DEBUG - Decoded 13, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'permissions-policy', b'interest-cohort=()'), total consumed 30 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 1124, consumed 3 bytes
hpack.hpack - DEBUG - Decoded (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), total consumed 1145 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-frame-options', b'SAMEORIGIN'), total consumed 23 bytes, indexed False
hpack.hpack - DEBUG - Decoded 12, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-xss-protection', b'1;mode=block'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 16, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-content-type-options', b'nosniff'), total consumed 24 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 5, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'referrer-policy', b'origin'), total consumed 19 bytes, indexed False
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 7, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'expect-ct', b'max-age=0'), total consumed 17 bytes, indexed False
hpack.hpack - DEBUG - Decoded 9, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 6, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'cache-control', b'no-cache'), total consumed 18 bytes, indexed False
hpack.hpack - DEBUG - Decoded 14, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 4, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'x-duckduckgo-locale', b'en_US'), total consumed 21 bytes, indexed False
hpack.hpack - DEBUG - Decoded 11, consumed 1 bytes
hpack.hpack - DEBUG - Decoded 2, consumed 1 bytes
hpack.hpack - DEBUG - Decoded (b'content-encoding', <memory at 0x16a94f1c0>), total consumed 16 bytes, indexed False
httpcore.http2 - DEBUG - receive_response_headers.complete return_value=(200, [(b'server', b'nginx'), (b'date', b'Wed, 13 Sep 2023 19:14:49 GMT'), (b'content-type', b'application/json; charset=UTF-8'), (b'vary', b'Accept-Encoding'), (b'expires', b'Wed, 13 Sep 2023 19:14:48 GMT'), (b'server-timing', b'total;dur=678;desc="Backend Total"'), (b'strict-transport-security', b'max-age=31536000'), (b'permissions-policy', b'interest-cohort=()'), (b'content-security-policy', b"default-src 'none' ; connect-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; manifest-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; media-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; script-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' 'unsafe-eval' ; font-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; img-src data:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; style-src  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ 'unsafe-inline' ; object-src 'none' ; worker-src blob: ; child-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-src blob:  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; form-action  https://duckduckgo.com https://*.duckduckgo.com https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion/ ; frame-ancestors 'self' ; base-uri 'self' ; block-all-mixed-content ;"), (b'x-frame-options', b'SAMEORIGIN'), (b'x-xss-protection', b'1;mode=block'), (b'x-content-type-options', b'nosniff'), (b'referrer-policy', b'origin'), (b'expect-ct', b'max-age=0'), (b'cache-control', b'no-cache'), (b'x-duckduckgo-locale', b'en_US'), (b'content-encoding', b'br')])
httpx - INFO - HTTP Request: GET https://links.duckduckgo.com/d.js?q=causes%20of%20neck%20pain&kl=wt-wt&l=wt-wt&s=0&df=y&vqd=4-74791542626849457195594700353869603104&o=json&sp=0&ex=-1 "HTTP/2 200 OK"
httpcore.http2 - DEBUG - receive_response_body.started request=<Request [b'GET']> stream_id=1
httpcore.http2 - DEBUG - receive_response_body.complete
httpcore.http2 - DEBUG - response_closed.started stream_id=1
httpcore.http2 - DEBUG - response_closed.complete
httpcore.connection - DEBUG - close.started
httpcore.connection - DEBUG - close.complete
httpcore.connection - DEBUG - close.started
httpcore.connection - DEBUG - close.complete
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["Answer the following questions as best you can, but speaking as compasionate medical professional. You have access to the following tools:\\n\\n                        Web Search: useful for when you need to answer questions about current events\\nSearch WebMD: useful for when you need to answer medical and pharmalogical questions\\n\\n                        Use the following format:\\n\\n                        Question: the input question you must answer\\n                        Thought: you should always think about what to do\\n                        Action: the action to take, should be one of [Web Search, Search WebMD]\\n                        Action Input: the input to the action\\n                        Observation: the result of the action\\n                        ... (this Thought/Action/Action Input/Observation can repeat N times)\\n                        Thought: I now know the final answer\\n                        Final Answer: the final answer to the original input question\\n\\n                        Begin! Remember to answer as a compansionate medical professional when giving your final answer.\\n                        Previous conversation history:\\n                        \\n                        Question: I\'m feeling some pain on my neck please suggest a treatment \\n                        \\nThought: I should consider the cause of the pain before suggesting a treatment.\\nAction: Web Search\\nAction Input: causes of neck pain\\nObservation: Outlook Neck pain or stiffness is usually from poor posture or overuse, or an awkward sleeping position. But sometimes, it can indicate a serious injury like whiplash or an illness, so a doctor\'s... Causes of neck pain include acute conditions, like muscle strains and whiplash, and chronic conditions, such as cervical spondylosis (neck osteoarthritis) and myofascial pain syndrome. Pinched nerves, infections, fractures, and spinal cord problems can also cause neck pain. Science has proven that chronic, low-grade inflammation can turn into a silent killer that contributes to cardiovas\\u00adcular disease, cancer, type 2 diabetes and other conditions. Get simple tips to fight inflammation and stay healthy -- from Harvard Medical School experts. Learn More Many things can cause your neck to hurt: Poor posture. Repetitive motion. Bad sleep habits. Gritting your teeth. Carrying a heavy shoulder bag or purse. Pinched nerves. Sports injuries or other ... What Causes Neck and Shoulder Pain? Causes and How to Find Relief Anne Asher, CPT Updated on June 03, 2023 Medically reviewed by Oluseun Olufade, MD Table of Contents Table of Contents When to See a Healthcare Provider The neck and shoulders are complex and interconnected areas, and medical problems that affect one often affect the other, as well.\\nThought: "], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["\\nObservation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1305 request_id=e454a57790e25f4e0e4889bd5752b280 response_code=200
google.auth.transport.requests - DEBUG - Making request: POST https://oauth2.googleapis.com/token
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): oauth2.googleapis.com:443
urllib3.connectionpool - DEBUG - https://oauth2.googleapis.com:443 "POST /token HTTP/1.1" 200 None
googleapiclient.discovery_cache - INFO - file_cache is only supported with oauth2client<4.0.0
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\n"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): api.openai.com:443
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=879 request_id=52181990ea1862863dbd8a5d97e562f6 response_code=200
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages?q=is%3Adraft&maxResults=10&alt=json
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/18a8f3bbf6920777?format=raw&alt=json
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/189323b4db3d623e?format=raw&alt=json
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\nThis was your previous work (but I haven\'t seen any of it! I only see what you return as final answer):\\nAction:\\n```\\n{\\n  \\"action\\": \\"search_gmail\\",\\n  \\"action_input\\": {\\n    \\"query\\": \\"is:draft\\"\\n  }\\n}\\n```\\n\\n\\nObservation: [{\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}, {\'id\': \'189323b4db3d623e\', \'threadId\': \'1893149e52ba6829\', \'snippet\': \'Glad it worked! El vie, 7 jul 2023 a las 10:57, Zoltan Prokai (&lt;zoltan@skillfulai.io&gt;) escribi\\u00f3: Seems to be working fine! Gracias!! Z\', \'body\': \'Glad it worked! \\\\r\\\\n\\\\r\\\\nEl vie, 7 jul 2023 a las 10:57, Zoltan Prokai () \\\\r\\\\nescribi\\u00f3:\\\\r\\\\n\\\\r\\\\n> Seems to be working fine! \\\\r\\\\n>\\\\r\\\\n> Gracias!!\\\\r\\\\n>\\\\r\\\\n> Z\\\\r\\\\n>\\\\r\\\\n\', \'subject\': \'Re: Greetings\', \'sender\': \'Emanuel Hernandez Castillo <emanuel@skillfulai.io>\'}]\\nThought:"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1826 request_id=597d3f11971ba1212910c512ab046485 response_code=200
googleapiclient.discovery - DEBUG - URL being requested: GET https://gmail.googleapis.com/gmail/v1/users/me/messages/18a8f3bbf6920777?format=raw&alt=json
openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
openai - DEBUG - api_version=None data='{"prompt": ["System: Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\ncreate_gmail_draft: Use this tool to create a draft email with the provided message fields., args: {{\'message\': {{\'title\': \'Message\', \'description\': \'The message to include in the draft.\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'description\': \'The list of recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'subject\': {{\'title\': \'Subject\', \'description\': \'The subject of the message.\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'description\': \'The list of CC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}, \'bcc\': {{\'title\': \'Bcc\', \'description\': \'The list of BCC recipients.\', \'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}}}\\nsend_gmail_message: Use this tool to send email messages. The input is the message, recipients, args: {{\'message\': {{\'title\': \'Message\', \'type\': \'string\'}}, \'to\': {{\'title\': \'To\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'subject\': {{\'title\': \'Subject\', \'type\': \'string\'}}, \'cc\': {{\'title\': \'Cc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}, \'bcc\': {{\'title\': \'Bcc\', \'anyOf\': [{{\'type\': \'string\'}}, {{\'type\': \'array\', \'items\': {{\'type\': \'string\'}}}}]}}}}\\nsearch_gmail: Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource., args: {{\'query\': {{\'title\': \'Query\', \'description\': \'The Gmail query. Example filters include from:sender, to:recipient, subject:subject, -filtered_term, in:folder, is:important|read|starred, after:year/mo/date, before:year/mo/date, label:label_name \\"exact phrase\\". Search newer/older than using d (day), m (month), and y (year): newer_than:2d, older_than:1y. Attachments with extension example: filename:pdf. Multiple term matching example: from:amy OR from:david.\', \'type\': \'string\'}}, \'resource\': {{\'description\': \'Whether to search for threads or messages.\', \'default\': \'messages\', \'allOf\': [{{\'$ref\': \'#/definitions/Resource\'}}]}}, \'max_results\': {{\'title\': \'Max Results\', \'description\': \'The maximum number of results to return.\', \'default\': 10, \'type\': \'integer\'}}}}\\nget_gmail_message: Use this tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, and sender., args: {{\'message_id\': {{\'title\': \'Message Id\', \'description\': \'The unique ID of the email message, retrieved from a search.\', \'type\': \'string\'}}}}\\nget_gmail_thread: Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages., args: {{\'thread_id\': {{\'title\': \'Thread Id\', \'description\': \'The thread ID.\', \'type\': \'string\'}}}}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid \\"action\\" values: \\"Final Answer\\" or create_gmail_draft, send_gmail_message, search_gmail, get_gmail_message, get_gmail_thread\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{\\n  \\"action\\": $TOOL_NAME,\\n  \\"action_input\\": $INPUT\\n}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{\\n  \\"action\\": \\"Final Answer\\",\\n  \\"action_input\\": \\"Final response to human\\"\\n}\\n```\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\\nThought:\\nHuman: Remember me the content on my last email draft \\n\\nThis was your previous work (but I haven\'t seen any of it! I only see what you return as final answer):\\nAction:\\n```\\n{\\n  \\"action\\": \\"search_gmail\\",\\n  \\"action_input\\": {\\n    \\"query\\": \\"is:draft\\"\\n  }\\n}\\n```\\n\\n\\nObservation: [{\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}, {\'id\': \'189323b4db3d623e\', \'threadId\': \'1893149e52ba6829\', \'snippet\': \'Glad it worked! El vie, 7 jul 2023 a las 10:57, Zoltan Prokai (&lt;zoltan@skillfulai.io&gt;) escribi\\u00f3: Seems to be working fine! Gracias!! Z\', \'body\': \'Glad it worked! \\\\r\\\\n\\\\r\\\\nEl vie, 7 jul 2023 a las 10:57, Zoltan Prokai () \\\\r\\\\nescribi\\u00f3:\\\\r\\\\n\\\\r\\\\n> Seems to be working fine! \\\\r\\\\n>\\\\r\\\\n> Gracias!!\\\\r\\\\n>\\\\r\\\\n> Z\\\\r\\\\n>\\\\r\\\\n\', \'subject\': \'Re: Greetings\', \'sender\': \'Emanuel Hernandez Castillo <emanuel@skillfulai.io>\'}]\\nThought: Retrieve the content of the last email draft\\nAction:\\n```\\n{\\n  \\"action\\": \\"get_gmail_message\\",\\n  \\"action_input\\": {\\n    \\"message_id\\": \\"18a8f3bbf6920777\\"\\n  }\\n}\\n```\\n\\n\\nObservation: {\'id\': \'18a8f3bbf6920777\', \'threadId\': \'18a8f3bbf6920777\', \'snippet\': \'Remembering Zoltan to chill\', \'body\': \'Remembering Zoltan to chill\\\\n\', \'subject\': \'Remembering Zoltan to chill\', \'sender\': \'emanuel@skillfulai.io\'}\\nThought:"], "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["Observation:"]}' message='Post details'
urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1320 request_id=729b1d057687f91145e7aeb1323c13bd response_code=200
